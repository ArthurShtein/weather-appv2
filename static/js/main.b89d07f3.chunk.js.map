{"version":3,"sources":["services/weatherService.js","store/actions/weatherAction.js","utils/utils.js","Components/FavouritesCity/FavouriteCity.jsx","Pages/Favourites/Favourites.jsx","Components/FiveDaysForecast/FiveDaysForecast.jsx","Components/CityDisplay/CityDisplay.jsx","Pages/Home/Home.jsx","Components/Header/Header.jsx","Components/Footer/Footer.jsx","App.jsx","store/reducers/weatherReducer.js","store/index.js","index.js"],"names":["weatherService","checkDuplicates","city","favCitys","favsFromLocal","JSON","parse","localStorage","getItem","find","item","cityName","noDuplications","filter","setItem","stringify","push","autoComplete","currentCondition","fiveDaysForecast","API_KEY","a","axios","get","data","console","log","locationKey","DailyForecasts","UpdateCity","dispatch","type","getCurrentCondition","key","getFiveDaysForecast","utilService","padNum","number","strNum","length","cToF","fTemp","fToCel","Math","floor","changeDate","date","newDate","Date","getDay","weekDay","Array","FavouriteCity","history","useHistory","useDispatch","currentTempState","useSelector","state","weatherModule","isCelcius","cTemp","temp","className","onClick","pathname","newCityToShow","Key","src","icon","alt","Favourites","favouritesFromLocal","map","index","FiveDaysForecast","FiveDaysForecastFromState","Temperature","Day","CelciusMinTemp","Minimum","Value","CelciusMaxTemp","Maximum","Icon","IconPhrase","CityDisplay","useState","inFavourite","setInFavourite","cityFromState","favourites","currentConditionFromState","isCityDisplayInFavourites","isInFavourites","useEffect","CelciusTemp","Imperial","WeatherIcon","newCityToFavourites","cityToAdd","finalFavourites","addCityToFavourites","Home","inputSearch","setInputSearch","refContainer","useRef","completeDataFromState","currentCityFromState","ref","placeholder","onChange","e","inputValue","target","value","autoCompleteResult","toggleTemp","LocalizedName","current","handleClick","Header","to","Footer","App","excact","path","component","INITIAL_STATE","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b89d07f3.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addLocationFromGeo } from \"../store/actions/weatherAction\";\r\nexport const weatherService = {\r\n  checkDuplicates,\r\n  autoComplete,\r\n  currentCondition,\r\n  fiveDaysForecast,\r\n  // getPositionByGeo,\r\n};\r\n\r\nconst API_KEY = \"4aBBAPNL6URV8G56agI6OJks01WPFlSa\";\r\n\r\nasync function autoComplete(autoComplete) {\r\n  try {\r\n    let { data } = await axios.get(\r\n      `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${autoComplete}`\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nasync function currentCondition(locationKey) {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `https://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${API_KEY}`\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nasync function fiveDaysForecast(locationKey) {\r\n  try {\r\n    let { data } = await axios.get(\r\n      `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationKey}?apikey=${API_KEY}`\r\n    );\r\n    return data.DailyForecasts;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// async function getPositionByGeo() {\r\n//   try {\r\n//     const success = (position) => {\r\n//       const latitude = position.coords.latitude;\r\n//       const longitude = position.coords.longitude;\r\n//     };\r\n\r\n//     const error = () => {\r\n//       console.log(\" Unable to find location\");\r\n//     };\r\n\r\n//     navigator.geolocation.getCurrentPosition(success, error);\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n//   let data = await axios.get(\r\n//     `http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${latitude}%${longitude}`\r\n//   );\r\n//   console.log(\"data >>>> \", data);\r\n// }\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n// async function getPositionByGeo() {\r\n//   const success = (position) => {\r\n//     const latitude = position.coords.latitude;\r\n//     const longitude = position.coords.longitude;\r\n\r\n//     const data  = axios.get(\r\n//       `http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${latitude},${longitude}`\r\n//     );\r\n\r\n//     data.then((res) => console.log(\"res >>>>\", res.data));\r\n\r\n    //////////////////////////////////////////////////////////////\r\n\r\n    // fetch(\r\n    //   `http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${latitude},${longitude}`\r\n    // )\r\n    //   .then((res) => res.json())\r\n    //   .then((data) => {\r\n    //     console.log(\"data >>>>\", data);\r\n    //     const newCity = { cityName: data.LocalizedName, Key: data.Key };\r\n    //     const dispatch = useDispatch();\r\n    //     dispatch(addLocationFromGeo(newCity));\r\n    //   });\r\n  // };\r\n\r\n//   const error = () => {\r\n//     console.log(\" Unable to find location\");\r\n//   };\r\n\r\n//   navigator.geolocation.getCurrentPosition(success, error);\r\n// }\r\n\r\nfunction checkDuplicates(city) {\r\n  let favCitys = [];\r\n  let favsFromLocal = JSON.parse(localStorage.getItem(\"favourites\"));\r\n\r\n  if (favsFromLocal) favCitys = favsFromLocal;\r\n\r\n  let isCityAlreadyInside = favCitys.find(\r\n    (item) => item.cityName === city.cityName\r\n  );\r\n\r\n  if (isCityAlreadyInside) {\r\n    const noDuplications = favCitys.filter(\r\n      (item) => item.cityName !== city.cityName\r\n    );\r\n    localStorage.setItem(\"favourites\", JSON.stringify(noDuplications));\r\n    return noDuplications;\r\n  } else {\r\n    favCitys.push(city);\r\n    localStorage.setItem(\"favourites\", JSON.stringify(favCitys));\r\n    return favCitys;\r\n  }\r\n}\r\n","import { weatherService } from \"../../services/weatherService\";\r\n\r\nexport function autoCompleteData(inputValue) {\r\n  return async (dispatch) => {\r\n    const autoCompleteResult = await weatherService.autoComplete(inputValue);\r\n    dispatch({ type: \"SET_AUTO_COMPLETE\", autoCompleteResult });\r\n  };\r\n}\r\n\r\nexport function toggleTemp(toggleTemp){\r\n  return (dispatch) => {\r\n    dispatch({ type: \"TOGGLE_TEMP\", toggleTemp });\r\n  }\r\n}\r\n\r\nexport function UpdateCity(city) {\r\n  return (dispatch) => {\r\n    dispatch({ type: \"SET_CITY\", city });\r\n  };\r\n}\r\n\r\nexport function addCityToFavourites(cityToAdd) {\r\n  const finalFavourites = weatherService.checkDuplicates(cityToAdd)\r\n  return (dispatch) => {\r\n    dispatch({ type: \"SET_FAVOURITES\", finalFavourites });\r\n  };\r\n}\r\n\r\nexport function getCurrentCondition(key) {\r\n  return async (dispatch) => {\r\n    const currentCondition = await weatherService.currentCondition(key);\r\n    dispatch({ type: \"SET_CURRENT_CONDITION\", currentCondition });\r\n  };\r\n}\r\n\r\nexport function getFiveDaysForecast(key) {\r\n  return async (dispatch) => {\r\n    const fiveDaysForecast = await weatherService.fiveDaysForecast(key);\r\n    dispatch({ type: \"SET_FIVE_DAYS_FORECAST\", fiveDaysForecast });\r\n  };\r\n}\r\n\r\n// export function addLocationFromGeo(city){\r\n// return async (dispatch) => {\r\n//   dispatch({type: \"SET_CITY_FROM_GEO\", city})\r\n// }\r\n// }","export const utilService = {\r\n  padNum,\r\n  cToF,\r\n  changeDate,\r\n};\r\n\r\nfunction padNum(number) {\r\n  const strNum = number + \"\";\r\n  if (strNum.length === 1) {\r\n    return \"0\" + strNum;\r\n  } else {\r\n    return strNum;\r\n  }\r\n}\r\n\r\nfunction cToF(fTemp) {\r\n  var fToCel = ((fTemp - 32) * 5) / 9;\r\n  return Math.floor(fToCel);\r\n}\r\n\r\nfunction changeDate(date) {\r\n  const newDate = new Date(date).getDay();\r\n  const weekDay = new Array(7);\r\n  weekDay[0] = \"Sunday\";\r\n  weekDay[1] = \"Monday\";\r\n  weekDay[2] = \"Tuesday\";\r\n  weekDay[3] = \"Wednseday\";\r\n  weekDay[4] = \"Thursday\";\r\n  weekDay[5] = \"Friday\";\r\n  weekDay[6] = \"Saturday\";\r\n\r\n  return weekDay[newDate];\r\n}\r\n","import React from \"react\";\r\nimport \"./FavouriteCity.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getCurrentCondition,\r\n  getFiveDaysForecast,\r\n  UpdateCity,\r\n} from \"../../store/actions/weatherAction\";\r\nimport { utilService } from \"../../utils/utils\";\r\n\r\nexport const FavouriteCity = ({ city }) => {\r\n  let history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const currentTempState = useSelector(\r\n    (state) => state.weatherModule.isCelcius\r\n  );\r\n  const handleClick = () => {\r\n    history.push({ pathname: \"/\" });\r\n    let newCityToShow = { cityName: city.cityName, Key: city.Key };\r\n    dispatch(UpdateCity(newCityToShow));\r\n    dispatch(getCurrentCondition(newCityToShow.Key));\r\n    dispatch(getFiveDaysForecast(newCityToShow.Key));\r\n  };\r\n\r\n  let cTemp = utilService.cToF(city.temp);\r\n\r\n  return (\r\n    <div className=\"favourite-city-container\" onClick={handleClick}>\r\n      <img\r\n        className=\"fav-display-img\"\r\n        src={`https://developer.accuweather.com/sites/default/files/${utilService.padNum(\r\n          city.icon\r\n        )}-s.png`}\r\n        alt=\"\"\r\n      />\r\n      <h2> {city.cityName} </h2>\r\n      <h3>{currentTempState ? `${cTemp}C°` : `${city.temp}F°`} </h3>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./Favourites.css\";\r\n\r\nimport { FavouriteCity } from \"../../Components/FavouritesCity/FavouriteCity\";\r\n\r\nexport const Favourites = () => {\r\n  const favouritesFromLocal = JSON.parse(localStorage.getItem(\"favourites\"));\r\n  if (!favouritesFromLocal)\r\n    return (\r\n      <div className=\"no-fav\">\r\n        <h1>No Favourites Yet </h1>{\" \"}\r\n      </div>\r\n    );\r\n  return (\r\n    <div className=\"favourites-container\">\r\n      {favouritesFromLocal.map((city, index) => {\r\n        return <FavouriteCity key={index} city={city} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { utilService } from \"../../utils/utils\";\r\nimport \"./FiveDaysForecast.css\";\r\n\r\nexport const FiveDaysForecast = () => {\r\n  const FiveDaysForecastFromState = useSelector(\r\n    (state) => state.weatherModule.fiveDaysForecast\r\n  );\r\n\r\n  const currentTempState = useSelector(\r\n    (state) => state.weatherModule.isCelcius\r\n  );\r\n  \r\n  return (\r\n    <div className=\"five-day-container\">\r\n      {FiveDaysForecastFromState.map((item, index) => {\r\n        const { Temperature, Date, Day } = item;\r\n        let CelciusMinTemp = utilService.cToF(Temperature.Minimum.Value);\r\n        let CelciusMaxTemp = utilService.cToF(Temperature.Maximum.Value);\r\n        return (\r\n          <div key={index} className=\"each-day-container\">\r\n            <div>\r\n              <h3> {utilService.changeDate(Date)}</h3>\r\n              <img\r\n                className=\"city-display-img\"\r\n                src={`https://developer.accuweather.com/sites/default/files/${utilService.padNum(\r\n                  Day.Icon\r\n                )}-s.png`}\r\n                alt=\"\"\r\n              />\r\n              <h4> {Day.IconPhrase}</h4>\r\n            </div>\r\n\r\n            {currentTempState ? (\r\n              <p>\r\n                {CelciusMinTemp}C° - {CelciusMaxTemp}C°\r\n              </p>\r\n            ) : (\r\n              <p>\r\n                {Temperature.Minimum.Value}F° - {Temperature.Maximum.Value}F°\r\n              </p>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addCityToFavourites } from \"../../store/actions/weatherAction\";\r\nimport \"./CityDisplay.css\";\r\n\r\nimport { utilService } from \"../../utils/utils.js\";\r\nimport FavoriteBorderIcon from \"@mui/icons-material/FavoriteBorder\";\r\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\r\n\r\nexport const CityDisplay = () => {\r\n  const [inFavourite, setInFavourite] = useState(false);\r\n\r\n  const cityFromState = useSelector((state) => state.weatherModule.city);\r\n  const favouritesFromLocal = useSelector(\r\n    (state) => state.weatherModule.favourites\r\n  );\r\n  const currentConditionFromState = useSelector(\r\n    (state) => state.weatherModule.currentCondition\r\n  );\r\n\r\n  const currentTempState = useSelector(\r\n    (state) => state.weatherModule.isCelcius\r\n  );\r\n\r\n  const isCityDisplayInFavourites = () => {\r\n    const isInFavourites = favouritesFromLocal.find((item) => {\r\n      return item.cityName === cityFromState.cityName;\r\n    });\r\n    if (isInFavourites) {\r\n      setInFavourite(true);\r\n    } else {\r\n      setInFavourite(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    isCityDisplayInFavourites();\r\n  }, [cityFromState, favouritesFromLocal]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClick = () => {\r\n    isCityDisplayInFavourites();\r\n    let newCityToFavourites = {\r\n      ...cityFromState,\r\n      temp: currentConditionFromState[0].Temperature.Imperial.Value,\r\n      icon: currentConditionFromState[0].WeatherIcon,\r\n    };\r\n    dispatch(addCityToFavourites(newCityToFavourites));\r\n  };\r\n\r\n  \r\n  if (!currentConditionFromState.length)\r\n  return <div> Search City to Display... </div>;\r\n  let CelciusTemp = utilService.cToF(\r\n    currentConditionFromState[0].Temperature.Imperial.Value\r\n  );\r\n  return (\r\n    <div className=\"city-display-container\">\r\n      <div className=\"city-display-left\">\r\n        <img\r\n          className=\"city-display-img\"\r\n          src={`https://developer.accuweather.com/sites/default/files/${utilService.padNum(\r\n            currentConditionFromState[0].WeatherIcon\r\n          )}-s.png`}\r\n          alt=\"\"\r\n        />\r\n        <div className=\"city-content\">\r\n          <h3> {cityFromState.cityName}</h3>\r\n          <h4>\r\n            {currentTempState\r\n              ? `${CelciusTemp}C°`\r\n              : `${currentConditionFromState[0].Temperature.Imperial.Value}F°`}\r\n          </h4>\r\n          {/* <h4>{currentConditionFromState[0].Temperature.Imperial.Value}F° </h4> */}\r\n        </div>\r\n      </div>\r\n      <div className=\"city-display-right\">\r\n        {inFavourite ? (\r\n          <FavoriteIcon className=\"full-icon\" />\r\n        ) : (\r\n          <FavoriteBorderIcon className=\"icon\" />\r\n        )}\r\n        <button className=\"city-display-btn\" onClick={handleClick}>\r\n          Add To Favourites\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  autoCompleteData,\r\n  getCurrentCondition,\r\n  getFiveDaysForecast,\r\n  toggleTemp,\r\n  UpdateCity,\r\n} from \"../../store/actions/weatherAction\";\r\n\r\nimport { FiveDaysForecast } from \"../../Components/FiveDaysForecast/FiveDaysForecast\";\r\nimport { CityDisplay } from \"../../Components/CityDisplay/CityDisplay\";\r\nimport { weatherService } from \"../../services/weatherService\";\r\nimport \"./Home.css\";\r\n\r\nexport const Home = () => {\r\n  const [inputSearch, setInputSearch] = useState(\"\");\r\n  const refContainer = useRef(null);\r\n\r\n  const dispatch = useDispatch();\r\n  const completeDataFromState = useSelector(\r\n    (state) => state.weatherModule.autoComplete\r\n  );\r\n\r\n  const currentCityFromState = useSelector((state) => state.weatherModule.city);\r\n  const currentTempState = useSelector(\r\n    (state) => state.weatherModule.isCelcius\r\n  );\r\n\r\n  // const cityFromGeoLocation = weatherService.getPositionByGeo();\r\n  // console.log('cityFromGeoLocation >>>>',cityFromGeoLocation  )\r\n\r\n  const handleClick = (item) => {\r\n    const { LocalizedName, Key } = item;\r\n    const newCityToSave = { cityName: LocalizedName, Key };\r\n    dispatch(UpdateCity(newCityToSave));\r\n    dispatch(getCurrentCondition(Key));\r\n    dispatch(getFiveDaysForecast(Key));\r\n    refContainer.current.value = \"\";\r\n    setInputSearch(\"\");\r\n  };\r\n\r\n  const handleClickTempToggle = () => {\r\n    dispatch(toggleTemp(!currentTempState));\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    if (!e.target.value) {\r\n      setInputSearch(\"\");\r\n      return;\r\n    }\r\n    setInputSearch(e.target.value);\r\n    dispatch(autoCompleteData(e.target.value));\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getCurrentCondition(currentCityFromState.Key));\r\n    dispatch(getFiveDaysForecast(currentCityFromState.Key));\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      <h1 className=\"home-header\"> Find The Weather In Any City </h1>\r\n\r\n      <input\r\n        ref={refContainer}\r\n        type=\"text\"\r\n        placeholder=\"search city\"\r\n        onChange={handleChange}\r\n        className=\"home-input\"\r\n      />\r\n\r\n      <button className=\"temp-btn\" onClick={handleClickTempToggle}>\r\n        {currentTempState ? \"Change To Farenhight\" : \"Change To Celcius\"}\r\n      </button>\r\n      <div className=\"btn-containers\">\r\n        {inputSearch &&\r\n          completeDataFromState.map((item) => {\r\n            const { LocalizedName, Key } = item;\r\n            return (\r\n              <div key={Key}>\r\n                <button className=\"city-btn\" onClick={() => handleClick(item)}>\r\n                  {LocalizedName}\r\n                </button>\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n      <CityDisplay />\r\n      <FiveDaysForecast />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport \"./Header.css\"\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <header>\r\n      <div>Weather App 2.0</div>\r\n      <div className=\"links\">\r\n        <Link to=\"/\"> Home </Link>\r\n        <Link to=\"/favourites\"> Favourites </Link>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n","import React from 'react'\r\nimport './Footer.css'\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p> Made by Arthur Shtein </p>\r\n        </footer>\r\n    )\r\n}\r\n","import \"./App.css\";\nimport React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\nimport { Favourites } from \"./Pages/Favourites/Favourites\";\nimport { Home } from \"./Pages/Home/Home\";\nimport { Header } from \"./Components/Header/Header\";\nimport { Footer } from \"./Components/Footer/Footer\";\n\nexport const App = () => {\n  return (\n    <HashRouter>\n      <Header></Header>\n      <main>\n        <Switch>\n          <Route excact path=\"/favourites\" component={Favourites} />\n          <Route excact path=\"/\" component={Home} />\n        </Switch>\n      </main>\n      <Footer></Footer>\n    </HashRouter>\n  );\n}\n\n","const INITIAL_STATE = {\r\n  city: { cityName: \"Tel Aviv\", Key: 21584 },\r\n  fiveDaysForecast: [],\r\n  currentCondition: {},\r\n  autoComplete: [],\r\n  favourites: [],\r\n  isCelcius: false,\r\n};\r\n\r\nexport function weatherReducer(state = INITIAL_STATE, action) {\r\n  switch (action.type) {\r\n    case \"SET_AUTO_COMPLETE\":\r\n      return {\r\n        ...state,\r\n        autoComplete: action.autoCompleteResult,\r\n      };\r\n    case \"SET_CITY\":\r\n      return {\r\n        ...state,\r\n        city: action.city,\r\n      };\r\n    case \"SET_CURRENT_CONDITION\":\r\n      return {\r\n        ...state,\r\n        currentCondition: action.currentCondition,\r\n      };\r\n    case \"SET_FIVE_DAYS_FORECAST\":\r\n      return {\r\n        ...state,\r\n        fiveDaysForecast: action.fiveDaysForecast,\r\n      };\r\n    case \"SET_FAVOURITES\":\r\n      return {\r\n        ...state,\r\n        favourites: action.finalFavourites,\r\n      };\r\n    case \"SET_CITY_FROM_GEO\":\r\n      return {\r\n        ...state,\r\n        city: action.city,\r\n      };\r\n    case \"TOGGLE_TEMP\":\r\n      return {\r\n        ...state,\r\n        isCelcius: action.toggleTemp,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport { weatherReducer } from \"./reducers/weatherReducer\";\r\n\r\n// Connecting redux devtools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n// Combining reducers into one\r\nconst rootReducer = combineReducers({\r\n  weatherModule: weatherReducer,\r\n});\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App.jsx\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}